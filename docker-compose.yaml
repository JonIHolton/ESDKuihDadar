version: '3.8'

services:
  warranty-request-db:
    image: mysql:latest
    ports:
      - "3306:3306"
    environment:
      MYSQL_USER: kuih
      MYSQL_PASSWORD: dadar
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: requests
    volumes:
      # - my_mysql_volume:/var/lib/mysql
      - ./SpringBoot/db/:/docker-entrypoint-initdb.d

  warranty-request-service:
    build:
      context: ./SpringBoot/
      dockerfile: Dockerfile
    ports:
      - "5000:8080"
    depends_on:
      - warranty-request-db
    restart: unless-stopped

  warranty-validation-db:
    image: mysql:latest
    volumes:
      - ./microservices/python_services/warranty_validation_service/db/:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: warranty_validation_db
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  warranty-validation-service:
    build:
      context: ./microservices/python_services/warranty_validation_service
      dockerfile: Dockerfile
    environment:
      - DB_HOST=warranty-validation-db
      - DB_USER=root
      - DB_PASSWORD=root
      - DB_NAME=warranty_validation_db
    ports:
      - "5002:5000"
    depends_on:
      - warranty-validation-db
    restart: always

  warranty-claim-orchestrator:
    build:
      context: ./microservices/python_services/warranty_claim_orchestrator
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    depends_on:
      - warranty-validation-service
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - ./microservices/python_services/email_service/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./microservices/python_services/email_service/rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      
  email-service:
    build:
      context: ./microservices/python_services/email_service
      dockerfile: Dockerfile
    image: darrelltwh/email_service:esd
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      e_queue_name: Email
      su_queue_name: ServiceUpdate
      shipping_queue_name: Shipping
      PYTHONUNBUFFERED: 1
  
  # shipping
  inventory-shipping-db:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: shippingrecord 
    ports:
      - "3308:3306"
    volumes:
      - ./microservices/python_services/shipping_v2/db/:/docker-entrypoint-initdb.d/ 
      
  inventory-service:
    build:
      context: ./microservices/python_services/shipping_v2/inventory
      dockerfile: Dockerfile
    volumes:
      - ./microservices/python_services/shipping_v2/inventory:/app
    ports:
      - "5003:5002"  
    command: python server.py

  shipping-service:
    build:
      context: ./microservices/python_services/shipping_v2/shipping
      dockerfile: Dockerfile
    volumes:
      - ./microservices/python_services/shipping_v2/shipping:/app
    ports:
      - "5004:5001"
    command: python server.py

  # rabbitmq service for shipping only
  rabbitmq-service:
    image: rabbitmq:3-management
    restart: always
    ports:
      - "5673:5672"
      - "15673:15672"
    volumes: 
      - ./microservices/python_services/shipping_v2/rabbitMQ/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./microservices/python_services/shipping_v2/rabbitMQ/rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      # - rabbitmq_data:/var/lib/rabbitmq
  
  # email service for shipping
  email-service-shipping:
    build:
      context: ./microservices/python_services/shipping_v2/email_service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - rabbitmq-service
    environment:
      rabbit_host: rabbitmq-service
      rabbit_port: 5672
      e_queue_name: Email
      su_queue_name: ServiceUpdate
      shipping_queue_name: Shipping
      PYTHONUNBUFFERED: 1

  source-replacement-orchestrator:
    build:
      context: ./microservices/python_services/source_replacement_orchestrator
      dockerfile: Dockerfile
    ports:
      - "5005:5000"
    restart: always

  # frontend
  ui:
    build:
      context: ./microservices/python_services/form
      dockerfile: Dockerfile
    ports:
      - "3000:5000"
    restart: always

#   # kong
#   kong-database:
#     image: postgres:15 # tested 20231101; Ref: https://docs.konghq.com/gateway/latest/support/third-party/
#     platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
#     restart: always
#     environment:
#       POSTGRES_DB: kong
#       POSTGRES_USER: kong
#       POSTGRES_PASSWORD: password
#     ports:
#       - "5432:5432"
#     healthcheck:
#       test: ["CMD", "pg_isready", "-U", "kong"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     # volumes:
#       # - pgdata:/var/lib/postgresql/data

#   #######################################
#   # Kong database migration
#   #######################################
#   kong-migration:
#     image: kong/kong-gateway:3.2.2.5 # tested 20231101
#     platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
#     command: "kong migrations bootstrap"
#     restart: on-failure
#     environment:
#       KONG_DATABASE: postgres
#       KONG_PG_HOST: kong-database
#       KONG_PG_USER: kong
#       KONG_PG_PASSWORD: password
#     depends_on:
#       - kong-database

#   #######################################
#   # Kong: The API Gateway
#   #######################################
#   kong:
#     image: kong/kong-gateway:3.2.2.5 # tested 20231101
#     platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
#     restart: always
#     environment:
#       KONG_DATABASE: postgres
#       KONG_PG_HOST: kong-database
#       KONG_PG_USER: kong
#       KONG_PG_PASSWORD: password
#       KONG_PROXY_ACCESS_LOG: /dev/stdout
#       KONG_ADMIN_ACCESS_LOG: /dev/stdout
#       KONG_PROXY_ERROR_LOG: /dev/stderr
#       KONG_ADMIN_ERROR_LOG: /dev/stderr
#       KONG_ADMIN_LISTEN: 0.0.0.0:8001
#       KONG_ADMIN_GUI_URL: localhost:8002
#     depends_on:
#       - kong-migration
#     ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
#       - "9000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
#       - "9443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
#       - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
#       - "9444:8444" # Admin API. Listens for calls from the command line over HTTPS.
#       - "9002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
#       - "9445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
#       - "9003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
#       - "9446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
#       - "9005:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
#       - "9447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.

  
  

  
      
      
# #       # - db-data:/var/lib/mysql
# #       # - rabbitmq_data:/var/lib/rabbitmq
  

# # # volumes:
# # #   my_mysql_volume:
